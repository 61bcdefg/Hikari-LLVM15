# This tests debugging without the presence of a .swiftmodule.
# REQUIRES: swift

# RUN: rm -rf %t && mkdir %t && cd %t
#
# Test what happens when we import NoSwiftmoduleHelper from main and use types
# from it (this used to crash, see rdar://60734897).
# RUN: %target-swift-frontend -c -g -serialize-debugging-options \
# RUN:          -module-cache-path %t/cache \
# RUN:          -parse-as-library \
# RUN:          -module-name NoSwiftmoduleHelper \
# RUN:          -emit-module \
# RUN:          -emit-module-path NoSwiftmoduleHelper.swiftmodule \
# RUN:          %S/Inputs/NoSwiftmoduleHelper.swift \
# RUN:          -o NoSwiftmoduleHelper.o

# RUN: %target-swift-frontend -c -g -serialize-debugging-options \
# RUN:          -module-cache-path %t/cache -I %t \
# RUN:          -primary-file %S/Inputs/No.swiftmodule.swift \
# RUN:          -module-name main -o %t/main.o
#
# RUN: %target-swiftc -o %t/a.out %t/main.o %t/NoSwiftmoduleHelper.o
# RUN: %lldb %t/a.out -s %s | FileCheck %S/Inputs/No.swiftmodule.swift

breakpoint set -p "break here"
run
fr var
up
fr var
quit

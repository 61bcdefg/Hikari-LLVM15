config.substitutions.append(('%{objroot}', config.clang_obj_root))
if not config.have_ondisk_cas:
    config.unsupported = True

import platform
if platform.system() == 'Windows':
    config.unsupported = True

import tempfile
config.daemon_temp_dir = tempfile.mkdtemp()

# Setup environment so that all the daemons spawned from clang are in single
# command mode and will quit once finishes its first command. If need to have
# daemon sharing, the daemon can be launched directly or the test can be added
# in a different directory.
config.environment['__CLANG_TEST_CC1DEPSCAND_EXTRA_ARGS'] = '-single-command'

# Feature for the temp directory path is not too long for certain tests.
# The limit is around 100 charactors and this check will leave about 20
# charactors to be used by individual tests.
if len(config.daemon_temp_dir) < 80:
    config.available_features.add('clang-cc1daemon')
    config.substitutions.append(('%{clang-daemon-dir}', config.daemon_temp_dir))
    config.environment['TMPDIR'] = config.daemon_temp_dir

    # This also needs small path for unix domain socket path.
    if config.enable_remote_cache:
        config.available_features.add('remote-cache-service')
        remote_cache_dir = os.path.join(config.daemon_temp_dir, 'rmt')
        os.mkdir(remote_cache_dir)
        config.substitutions.append(('%{remote-cache-dir}', remote_cache_dir))
